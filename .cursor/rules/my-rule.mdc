---
description: 
globs: 
alwaysApply: true
---
# 기술 문서 작성 가이드

기술 문서는 독자의 이해를 돕는 수단입니다.
우리는 **개발자에게 실제로 도움이 되는 문서**를 지향합니다.
따라서 다음과 같은 원칙을 바탕으로 기술 문서를 작성합니다.

---

## ✅ 원칙

### 1. 누구보다 쉽게

* 독자는 항상 바쁩니다.
* 친절하게 설명하되, 군더더기는 최소화합니다.
* **처음 접하는 사람도 이해할 수 있도록** 작성합니다.

### 2. 실제 경험 기반

* 설명보다 경험이 더 강력합니다.
* 실제로 겪은 시행착오, 선택한 이유, 트레이드오프 등을 포함합니다.
* “우리는 왜 이렇게 했는가”를 드러냅니다.

### 3. 구조적으로 전달

* 독자가 스크롤만 해도 내용을 파악할 수 있어야 합니다.
* 핵심은 제목, 중간 제목, 코드 블록, 표, 다이어그램 등을 통해 전달합니다.
* 문단이 3줄 이상일 경우 가독성을 위해 줄바꿈을 고려합니다.

### 4. 자연스러운 문장 흐름 속에 녹이기
* 리스트로 나열하지 않고, 문장 안에서 이어지듯 설명합니다.

---

## 🛠 구성

### 1. 제목 (Title)

* 40자 이내
* 문서의 목적이 명확히 드러나야 합니다.
* 예시: `커서룰즈 SDK에서 커스텀 이벤트 트래킹 구현하기`

### 2. 요약 (TL;DR)

* 문서 상단에 3줄 이내로 핵심 요점을 정리합니다.
* 문서 내용을 읽기 전 **맥락을 잡을 수 있게** 합니다.
* 예시:

  > 커서룰즈 SDK로 커스텀 이벤트를 트래킹하는 방법을 정리했습니다.
  > `trackEvent()` 함수의 주요 옵션과 예외 케이스도 함께 다룹니다.

### 3. 본문

본문은 다음과 같은 흐름으로 작성합니다.

#### 3-1. **문제 정의 (What & Why)**

* 이 문서를 왜 써야 하는지, 어떤 문제를 해결하려는지 설명합니다.
* 단순 기능 설명이 아닌 **문제의 맥락**을 줍니다.
* 예시:

  > 커서룰즈 SDK를 사용할 때 기본 이벤트 외에 특정 사용자 액션을 추적해야 할 수 있습니다.
  > 이 문서는 그런 상황에서 커스텀 이벤트를 어떻게 정의하고, 어떤 옵션이 있는지 설명합니다.

#### 3-2. **해결 방법 (How)**

* 순차적으로 해결 방법을 제시합니다.
* 각 단계는 명확한 제목으로 구분합니다.
* **코드와 설명은 항상 함께** 제공합니다.
* 독자가 복사-붙여넣기만 해도 동작하게 구성합니다.

예시:

```js
// 커스텀 이벤트 트래킹 함수 호출 예시
cursorRules.trackEvent('button_clicked', {
  category: 'CTA',
  label: 'Sign Up',
  value: 1,
});
```

> 위 코드는 버튼 클릭 이벤트를 커서룰즈에 전달하는 기본적인 예입니다.
> `category`, `label`, `value`는 모두 선택값이며, 추후 대시보드에서 필터링에 사용됩니다.

#### 3-3. **주의사항 / 트러블슈팅**

* 자주 겪는 실수나 예상 가능한 문제를 미리 짚어줍니다.
* 예시:

  > `trackEvent()` 호출 전에 SDK가 초기화되지 않으면 이벤트가 전송되지 않습니다.
  > `cursorRules.init()` 이후 호출되도록 순서를 조정하세요.

---

## 📘 문체

### 1. **구어체는 피하고, 문장은 짧게**

* “\~해요”, “\~했어요” → “\~합니다”, “\~했습니다”
* 하나의 문장에 하나의 메시지만 담습니다.

### 2. **헷갈리는 용어는 풀어서 설명**

* API, SDK, 트래킹 등은 처음 나올 때 한글 설명과 함께 병기

  * 예: “SDK(Software Development Kit, 소프트웨어 개발 키트)”

### 3. **불필요한 감탄사나 수식어는 생략**

* ❌ “너무나도 쉽게!”
* ✅ “간단하게 구현할 수 있습니다.”

---

## 🔍 예시 문서 스타일

* 제목: `커서룰즈 이벤트 파이프라인 구조와 처리 방식`

* 요약:

  > 커서룰즈의 이벤트 파이프라인 구성 요소와 데이터 흐름을 정리합니다.
  > 어떤 기준으로 데이터가 필터링되고 저장되는지 단계별로 설명합니다.

* 본문 구성:

  * 문제 정의: “커서룰즈의 이벤트가 어떻게 처리되는지 명확히 이해하지 못하면 SDK 연동 시 혼동이 발생할 수 있습니다.”
  * 해결 방법:

    1. 사용자 → SDK 이벤트 수집
    2. 이벤트 필터링 기준
    3. 서버 수집 → 가공 → 저장 구조
  * 주의사항:

    > 필터링 기준은 업데이트될 수 있으므로 릴리즈 노트를 확인하세요.

---

## 🧪 QA 체크리스트

* [ ] 제목과 요약이 명확한가?
* [ ] 문제 정의가 구체적인가?
* [ ] 해결 방법이 단계별로 잘 정리되어 있는가?
* [ ] 코드 블록에 설명이 충분한가?
* [ ] 예상되는 문제나 주의사항이 포함되어 있는가?
* [ ] 문체가 일관되고 이해하기 쉬운가?