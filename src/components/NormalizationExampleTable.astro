---
// src/components/NormalizationExampleTable.astro
interface Props {
    tableTitle: string;
    headers: string[];
    rows: string[][];
    tableClass?: string;
    caption?: string;
}

const {
    tableTitle,
    headers,
    rows,
    tableClass = "trendy-table",
    caption,
} = Astro.props;
---

{
    tableTitle && (
        <p>
            <strong set:html={tableTitle} />
        </p>
    )
}
<div class="table-wrapper">
    <table class={tableClass}>
        {caption && <caption>{caption}</caption>}
        <thead>
            <tr>
                {headers.map((header) => <th scope="col">{header}</th>)}
            </tr>
        </thead>
        <tbody>
            {
                rows.map((row) => (
                    <tr>
                        {row.map((cell, index) => {
                            // 첫 번째 셀은 scope="row"를 가질 수 있도록 th로 렌더링할 수도 있으나,
                            // 현재 데이터 구조에서는 모든 셀을 td로 통일합니다.
                            // 필요시 이 부분을 확장할 수 있습니다.
                            return <td>{cell}</td>;
                        })}
                    </tr>
                ))
            }
        </tbody>
    </table>
</div>

<style>
    .table-wrapper {
        overflow-x: auto; /* 작은 화면에서 테이블이 넘칠 경우 가로 스크롤 생성 */
        margin-bottom: 1em;
    }
    /* .trendy-table 스타일은 global custom.css에 정의되어 있다고 가정합니다. */
    /* 필요하다면 여기에 컴포넌트 국한적인 스타일을 추가할 수 있습니다. */
    p > strong {
        font-size: 1.05em; /* 기존보다 약간 줄여서 컴포넌트 내부 제목 느낌을 줍니다. */
        display: block;
        margin-bottom: 0.5em;
    }
</style>
